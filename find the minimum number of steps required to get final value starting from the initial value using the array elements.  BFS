/*
Given an array of integers and a number K with initial and final values. 
Your task is to find the minimum number of steps required to get final value starting from the initial value using the array elements. You can only do add (add operation % 1000) on values to get the final value. 
At every step, you are allowed to add any of the array elements with modulus operation.

Input: initial = 1, final = 6, a[] = {1, 2, 3, 4}
Output: 2
Step 1: (1 + 1 ) % 1000 = 2.
Step 2: (2 + 4) % 1000 = 6 (which is required final value).
Input: start = 998 end = 2 a[] = {2, 1, 3}
Output: 2
Step 1 : (998 + 2) % 1000 = 0.
Step 2 : (0 + 2) % 1000 = 2.
OR
Step 1 : (998 + 1) % 1000 = 999.
Step 2 : (999 + 3) % 1000 = 2

*/

#include<queue>
#include <iostream>
using namespace std;

struct data
{
    int u,b;
    data(int x,int y)
    {
        u=x;
        b=y;
    }
};

int main()
{
   int s,e,a[3];
   cin>>s>>e;
   for(int i=0;i<3;i++)
     cin>>a[i];
     
     queue<data>q;
     q.push(data(s+a[0]%1000,1));
     q.push(data(s+a[1]%1000,1));
     q.push(data(s+a[2]%1000,1));
     //q.push(data(s+a[3]%1000,1));
     
     
     int f=0;
     while(!q.empty())
     {
         for(int i=0;i<q.size();i++)
         { 
             data t=q.front();
             ;
             
             q.pop();
             if(t.u==e)
             {
                 f=1;
                 cout<<t.b<<"\n";
                 break;
             }
             
            q.push(data((t.u+a[0])%1000,t.b+1));
             q.push(data((t.u+a[1])%1000,t.b+1));
             q.push(data((t.u+a[2])%1000,t.b+1));
            // q.push(data(t.u+a[3]%1000,t.b+1)); 
         }
         if(f==1)
         break;
     }
   
   
   return 0;
}
